<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SysWork.Data</name>
    </assembly>
    <members>
        <member name="T:SysWork.Data.Common.DbConnectionUtilities.DbExecute">
            <summary>
            Class to facilitate sql queries.
            </summary>
            <remarks>
            This class implements the builder pattern to help execute structured queries. Supports ExecuteNonQuery(), ExecuteScalar() and ExecuteReader() and multiple database engines <seealso cref="T:SysWork.Data.Common.EDataBaseEngine"/>..
            </remarks>
            <example>
            <code>
              var connectionString = "MyConnectrionString";
              
              var recordsAffected = new DbExecute(connectionString)
             .Query("UPDATE Products SET Cost = @pCost WHERE IdProduct = @pIdProduct AND IdCategory = @pIdCategory")
             .AddParameter("@pCost",155.4)
             .AddParameter("@pIdProduct",77978788)
             .AddParameter("@pIdCategory",5)
             .ExecuteNonQuery();
             
            </code>
            </example>
        </member>
        <member name="P:SysWork.Data.Common.DbConnectionUtilities.DbExecute.SqlQuery">
            <summary>
            Gets or Sets the SQL query.
            </summary>
            <value>
            The SQL query.
            </value>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SysWork.Data.Common.DbConnectionUtilities.DbExecute"/> class. The databaseEngine is MSSqlServer.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.#ctor(System.String,SysWork.Data.Common.EDataBaseEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:SysWork.Data.Common.DbConnectionUtilities.DbExecute"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="dataBaseEngine">The data base engine.</param>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.Query(System.String)">
            <summary>
            Set the SQL query.
            </summary>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.AddParameter(System.String,System.Object)">
            <summary>
            Adds and parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.AddParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds multiples parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.ExecuteNonQuery">
            <summary>
            Run an IDbCommand with the SQLQuery using the ExecuteNonQuery() method.
            </summary>
            <returns>An long with the records affecteds by the query.</returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.ExecuteNonQuery(System.Data.IDbConnection)">
            <summary>
            Run an IDbCommand with the SQLQuery using the ExecuteNonQuery() method and use the IDbConnection provided.
            </summary>
            <param name="dbConnection">The database connection.</param>
            <returns>An long with the records affecteds by the query.</returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.ExecuteNonQuery(System.Data.IDbTransaction)">
            <summary>
            Run an IDbCommand with the SQLQuery using the ExecuteNonQuery() method and use the IDbTransaction provided.
            </summary>
            <param name="dbTransaction">The database transaction.</param>
            <returns>An long with the records affecteds by the query.</returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.ExecuteNonQuery(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Run an IDbCommand with the SQLQuery using the ExecuteNonQuery() method and use the IDbConnection and the IDbTransaction provided.
            </summary>
            <param name="paramConnection">The parameter connection.</param>
            <param name="dbTransaction">The database transaction.</param>
            <returns>
            An long with the records affecteds by the query.
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.ExecuteScalar">
            <summary>
            Run an IDbCommand with the SQLQuery using the ExecuteScalar() method.
            </summary>
            <returns>
            An object that must then be converted to obtain the query result value
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.ExecuteScalar(System.Data.IDbConnection)">
            <summary>
            Run an IDbCommand with the SQLQuery using the ExecuteScalar() method and use the IDbConnection provided.
            </summary>
            <param name="dbConnection">The database connection.</param>
            <returns>
            An object that must then be converted to obtain the query result value.
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.ExecuteScalar(System.Data.IDbTransaction)">
            <summary>
            Run an IDbCommand with the SQLQuery using the ExecuteScalar() method and use the IDbTransaction provided.
            </summary>
            <param name="dbTransaction">The database transaction.</param>
            <returns>
            An object that must then be converted to obtain the query result value.
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.ExecuteScalar(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Run an IDbCommand with the SQLQuery using the ExecuteScalar() method and use the IDbConnection and the IDbTransaction provided.
            </summary>
            <param name="paramConnection">The parameter connection.</param>
            <param name="dbTransaction">The database transaction.</param>
            <returns>
            An object that must then be converted to obtain the query result value.
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.ExecuteReader">
            <summary>
            Run an IDbCommand with the SQLQuery using the ExecuteReader() method.
            </summary>
            <returns>
            An IDataReader
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.ExecuteReader(System.Data.IDbConnection)">
            <summary>
            Run an IDbCommand with the SQLQuery using the ExecuteReader() method and use the IDbConnection provided.
            </summary>
            <param name="dbConnection">The database connection.</param>
            <returns>
            An IDataReader
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.ExecuteReader(System.Data.IDbTransaction)">
            <summary>
            Run an IDbCommand with the SQLQuery using the ExecuteReader() method and use the IDbTransaction provided.
            </summary>
            <param name="dbTransaction">The database transaction.</param>
            <returns>
            An IDataReader
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DbConnectionUtilities.DbExecute.ExecuteReader(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Run an IDbCommand with the SQLQuery using the ExecuteReader() method and use the IDbConnection and the IDbTransaction provided.
            </summary>
            <param name="paramConnection">The parameter connection.</param>
            <param name="dbTransaction">The database transaction.</param>
            <returns>
            An IDataReader
            </returns>
        </member>
        <member name="T:SysWork.Data.Common.DbConnector.AbstractDbConnector">
            <summary>
            Author : Diego Martinez
            Email : dmartinez@syswork.com.ar
            Date : 30/09/2019
            Description : Clase abstracta para implementar conexion a base de datos y en caso de fallar
                          solicitar al usuario los parametros de conexion o no. 
                          Ademas, permite almacenar en un archivo de configuracion, las cadenas de conexion,
                          las mismas, pueden Encryptarse.
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.ConnectionStringName">
            <summary>
            Devuelve o Establece el nombre de la cadena de conexion dentro del archivos de configuracion
            <see cref="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.WriteInConfigFile"/>
            <see cref="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.TryGetConnectionStringFromConfig"/>
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.ConnectionString">
            <summary>
            Devuelve o Establece la ConnectionString del Connector
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.PromptUser">
            <summary>
            Determina si en caso que la cadena de conexion este vacia, o no se pueda realizar la conexion, el usuario
            podrá informar los parametros de conexion.
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.UserGotParameters">
            <summary>
            Devuelve si el usuario, ingreso datos.
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.DefaultDataSource">
            <summary>
            Origen de datos Predeterminado (nombre de server / instancia)
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.DefaultUser">
            <summary>
            Login Predeterminado
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.DefaultPassword">
            <summary>
            Password Predeterminado
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.DefaultDatabase">
            <summary>
            Base de datos predeterminada.
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.IsConnectionSuccess">
            <summary>
            Devuelve si se pudo realizar la conexion correctamente con los datos proporcionados.
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.WriteInConfigFile">
            <summary>
            En caso de conexion correcta escribe la cadena de conexion en el archivo de configuracion
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.IsEncryptedData">
            <summary>
            Devuelve o Establece si se debe encriptar datos sensibles de la cadena de conexion, como ser el nombre
            de usuario, base de datos y password.
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.TryGetConnectionStringFromConfig">
            <summary>
            En el caso que se informe un ConnectionStringName determina si se intenta obtener
            desde el archivo de configuracion.
            <seealso cref="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.ConnectionStringName"/>
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.AbstractDbConnector.ConnectionError">
            <summary>
            Muestra el ultimo mensaje de error ocurrido al intentar abrir la conecction.
            </summary>
        </member>
        <member name="M:SysWork.Data.Common.DbConnector.AbstractDbConnector.Connect">
            <summary>
            Intenta la conexion, y realiza las acciones solicitadas.
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.DbConnector.DataBaseConnector">
            <summary>
            
            Author : Diego Martinez
            Email : dmartinez@syswork.com.ar
            
            Date : 30/09/2019
            
            Description : DabaBaseConnector multiDbEngine
            
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.DataBaseConnector.ConnectionStringName">
            <summary>
            Devuelve o Establece el nombre de la cadena de conexion dentro del archivos de configuracion
            <see cref="P:SysWork.Data.Common.DbConnector.DataBaseConnector.WriteInConfigFile"/>
            <see cref="P:SysWork.Data.Common.DbConnector.DataBaseConnector.TryGetConnectionStringFromConfig"/>
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.DataBaseConnector.ConnectionString">
            <summary>
            Devuelve o Establece la ConnectionString del Connector
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.DataBaseConnector.PromptUser">
            <summary>
            Determina si en caso que la cadena de conexion este vacia, o no se pueda realizar la conexion, el usuario
            podrá informar los parametros de conexion.
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.DataBaseConnector.UserGotParameters">
            <summary>
            Devuelve si el usuario, ingreso datos.
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.DataBaseConnector.DefaultDataSource">
            <summary>
            Origen de datos Predeterminado (nombre de server / instancia)
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.DataBaseConnector.DefaultUser">
            <summary>
            Login Predeterminado
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.DataBaseConnector.DefaultPassword">
            <summary>
            Password Predeterminado
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.DataBaseConnector.DefaultDatabase">
            <summary>
            Base de datos predeterminada.
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.DataBaseConnector.IsConnectionSuccess">
            <summary>
            Devuelve si se pudo realizar la conexion correctamente con los datos proporcionados.
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.DataBaseConnector.WriteInConfigFile">
            <summary>
            En caso de conexion correcta escribe la cadena de conexion en el archivo de configuracion
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.DataBaseConnector.IsEncryptedData">
            <summary>
            Devuelve o Establece si se debe encriptar datos sensibles de la cadena de conexion, como ser el nombre
            de usuario, base de datos y password.
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.DataBaseConnector.TryGetConnectionStringFromConfig">
            <summary>
            En el caso que se informe un ConnectionStringName determina si se intenta obtener
            desde el archivo de configuracion.
            <seealso cref="P:SysWork.Data.Common.DbConnector.DataBaseConnector.ConnectionStringName"/>
            </summary>
        </member>
        <member name="P:SysWork.Data.Common.DbConnector.DataBaseConnector.ConnectionError">
            <summary>
            Muestra el ultimo mensaje de error ocurrido al intentar abrir la conecction.
            </summary>
        </member>
        <member name="M:SysWork.Data.Common.DbConnector.DataBaseConnector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SysWork.Data.Common.DbConnector.DataBaseConnector"/> class.
            </summary>
        </member>
        <member name="M:SysWork.Data.Common.DbConnector.DataBaseConnector.#ctor(SysWork.Data.Common.EDataBaseEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:SysWork.Data.Common.DbConnector.DataBaseConnector"/> class.
            </summary>
            <param name="dataBaseEngine">The data base engine.</param>
        </member>
        <member name="M:SysWork.Data.Common.DbConnector.DataBaseConnector.Connect">
            <summary>
            Connects this instance.
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.DbConnector.DbConnectorMSSqlServer">
            <summary>
            
            Author : Diego Martinez
            Email : dmartinez@syswork.com.ar
            
            Date : 30/09/2019
            
            Description : implementacion de AbstractDbConnector para MSSQLServer
            
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.DbConnector.DbConnectorMySql">
            <summary>
            
            Author : Diego Martinez
            Email : dmartinez@syswork.com.ar
            
            Date : 30/09/2019
            
            Description : implementacion de AbstractDbConnector para MySql
            
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.DbConnector.DbConnectorOleDb">
            <summary>
            
            Author : Diego Martinez
            Email : dmartinez@syswork.com.ar
            
            Date : 30/09/2019
            
            Description : implementacion de AbstractDbConnector para OleDb
            
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.DbConnector.DbConnectorSqLite">
            <summary>
            
            Author : Diego Martinez
            Email : dmartinez@syswork.com.ar
            
            Date : 30/09/2019
            
            Description : implementacion de AbstractDbConnector para Sqlite
            
            </summary>
        </member>
        <member name="F:SysWork.Data.Common.FormsGetParam.FrmGetParamOleDb.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SysWork.Data.Common.FormsGetParam.FrmGetParamOleDb.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SysWork.Data.Common.FormsGetParam.FrmGetParamOleDb.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SysWork.Data.Common.FormsGetParam.FrmGetParamMySQL.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SysWork.Data.Common.FormsGetParam.FrmGetParamMySQL.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SysWork.Data.Common.FormsGetParam.FrmGetParamMySQL.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SysWork.Data.Common.FormsGetParam.FrmGetParamSQL.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SysWork.Data.Common.FormsGetParam.FrmGetParamSQL.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SysWork.Data.Common.FormsGetParam.FrmGetParamSQL.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SysWork.Data.Common.FormsGetParam.FrmGetParamSQLite.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SysWork.Data.Common.FormsGetParam.FrmGetParamSQLite.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SysWork.Data.Common.FormsGetParam.FrmGetParamSQLite.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.LambdaSqlBuilder.Adapter.ISqlAdapter">
            <summary>
            SQL adapter provides db specific functionality related to db specific SQL syntax
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.LambdaSqlBuilder.Adapter.SqlAdapterBase">
            <summary>
            Provides functionality common to all supported databases
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.LambdaSqlBuilder.Adapter.SqlServer2008Adapter">
            <summary>
            Provides functionality specific to SQL Server 2008
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.LambdaSqlBuilder.Adapter.SqlServer2012Adapter">
            <summary>
            Provides functionality specific to SQL Server 2012
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.LambdaSqlBuilder.Adapter.SqlServerAdapterBase">
            <summary>
            Provides functionality common to all supported SQL Server versions
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.LambdaSqlBuilder.Builder.SqlQueryBuilder">
            <summary>
            Implements the whole SQL building logic. Continually adds and stores the SQL parts as the requests come. 
            When requested to return the QueryString, the parts are combined and returned as a single query string.
            The query parameters are stored in a dictionary implemented by an ExpandoObject that can be requested by QueryParameters.
            </summary>
            <summary>
            Implements the expression buiding for the WHERE statement
            </summary>
            <summary>
            Implements the SQL building for JOIN, ORDER BY, SELECT, and GROUP BY
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.LambdaSqlBuilder.SqlLam`1">
            <summary>
            The single most important LambdaSqlBuilder class. Encapsulates the whole SQL building and lambda expression resolving logic. 
            Serves as a proxy to the underlying SQL builder and the lambda expression resolver. It should be used to continually build the SQL query
            and then request the QueryString as well as the QueryParameters at the end.
            </summary>
            <typeparam name="T">Entity type required for lambda expressions as well as for proper resolution of the table name and the column names</typeparam>
        </member>
        <member name="T:SysWork.Data.Common.LambdaSqlBuilder.SqlLamBase">
            <summary>
            Base functionality for the SqlLam class that is not related to any specific entity type
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.LambdaSqlBuilder.ValueObjects.LikeMethod">
            <summary>
            An enumeration of the supported string methods for the SQL LIKE statement. The item names should match the related string methods.
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.LambdaSqlBuilder.ValueObjects.SelectFunction">
            <summary>
            An enumeration of the supported aggregate SQL functions. The item names should match the related function names
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.LambdaSqlBuilder.ValueObjects.SqlAdapter">
            <summary>
            An enumeration of the available SQL adapters. Can be used to set the backing database for db specific SQL syntax
            </summary>
        </member>
        <member name="T:SysWork.Data.Common.DataObjectProvider.AbstractDataObjectCreator">
            <summary>
            Abstract Class to Implement an ObjectCreator.
            </summary>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.AbstractDataObjectCreator.GetIDbConnection">
            <summary>
            Gets an IDbConnection (Interface Type).
            </summary>
            <returns>An IDbConnection().</returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.AbstractDataObjectCreator.GetIDbConnection(System.String)">
            <summary>
            Gets an IDbConnection (Interface Type). With the connectionString.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>An IDbConnection().</returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.AbstractDataObjectCreator.GetDbConnection">
            <summary>
            Gets an DbConnection.
            </summary>
            <returns>An DbConnection().</returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.AbstractDataObjectCreator.GetDbConnection(System.String)">
            <summary>
            Gets an DbConnection with the connectionString.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>An DbConnection().</returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.AbstractDataObjectCreator.GetIDbDataParameter">
            <summary>
            Gets an IDbDataParameter.
            </summary>
            <returns>An IDbDataParameter().</returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.AbstractDataObjectCreator.GetDbConnectionStringBuilder">
            <summary>
            Gets an DbConnectionStringBuilder.
            </summary>
            <returns>An DbConnectionStringBuilder().</returns>
        </member>
        <member name="T:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMySql">
            <summary>
            Implentation of AbstractDataObjectCreator Class for MySql.
            </summary>
            <seealso cref="T:SysWork.Data.Common.DataObjectProvider.AbstractDataObjectCreator" />
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMySql.GetDbConnection">
            <summary>
            Gets an DbConnection.
            </summary>
            <returns>An DbConnection (MySqlConnection).</returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMySql.GetDbConnection(System.String)">
            <summary>
            Gets an DbConnection with the connectionString.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>An DbConnection (MySqlConnection).</returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMySql.GetDbConnectionStringBuilder">
            <summary>
            Gets an DbConnectionStringBuilder.
            </summary>
            <returns>
            An DbConnectionStringBuilder (MySqlConnectionStringBuilder).
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMySql.GetIDbConnection">
            <summary>
            Gets an IDbConnection (Interface Type).
            </summary>
            <returns>An IDbConnection (MySqlConnection).</returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMySql.GetIDbConnection(System.String)">
            <summary>
            Gets an IDbConnection (Interface Type). With the connectionString.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>An IDbConnection(MySqlConnection).</returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMySql.GetIDbDataParameter">
            <summary>
            Gets an IDbDataParameter.
            </summary>
            <returns>An IDbDataParameter (MySqlParameter).</returns>
        </member>
        <member name="T:SysWork.Data.Common.DataObjectProvider.DbObjectProvider">
             <summary>
             This Class provides Database Objects to diferents Database Engines.
             Implement the Abstract Factory Method Pattern
             </summary>
            <remarks>
             This class, depending of the dataBaseEngine <see cref="T:SysWork.Data.Common.EDataBaseEngine"/> passed in the constructor, 
             is responsible for providing the different Database Objects 
             using the "DataObjectCreators" that implement AbstractDataObjectCreator.
             </remarks> 
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DbObjectProvider.#ctor(SysWork.Data.Common.EDataBaseEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:SysWork.Data.Common.DataObjectProvider.DbObjectProvider"/> class.
            </summary>
            <param name="dataBaseEngine">The data base engine.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The databaseEngine value is not supported by this method.</exception>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DbObjectProvider.GetIDbConnection">
            <summary>
            Gets an IDbConnection. The object is closed.
            </summary>
            <returns>
            An instantiated IDbConnection depending of the database engine. The object is closed.
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DbObjectProvider.GetIDbConnection(System.String)">
            <summary>
            Gets an IDbConnection. The object is closed.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>
            An instantiated IdbConnection depending of the database engine with the connectionString atribute. The object is closed.
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DbObjectProvider.GetDbConnection">
            <summary>
            Gets an DbConnection. The object is closed.
            </summary>
            <returns>
            An instantiated DbConnection depending of the database engine. The object is closed.
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DbObjectProvider.GetDbConnection(System.String)">
            <summary>
            Gets an DbConnection. The object is closed.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>
            An instantiated DbConnection depending of the database engine with the connectionString. The object is closed.
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DbObjectProvider.GetIDbDataParameter">
            <summary>
            Gets an IDbDataParameter.
            </summary>
            <returns>
            An instantiated IDbDataParameter depending of the database engine.
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DbObjectProvider.GetDbConnectionStringBuilder">
            <summary>
            Gets an DbConnectionStringBuilder.
            </summary>
            <returns>
            An instantiated DbConnectionStringBuilder depending of the database engine..
            </returns>
        </member>
        <member name="T:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorOleDb">
            <summary>
            Implentation of AbstractDataObjectCreator Class for OleDb.
            </summary>
            <seealso cref="T:SysWork.Data.Common.DataObjectProvider.AbstractDataObjectCreator" />
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorOleDb.GetDbConnection">
            <summary>
            Gets an DbConnection.
            </summary>
            <returns>An DbConnection(OleDbConnection).</returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorOleDb.GetDbConnection(System.String)">
            <summary>
            Gets an DbConnection with the connectionString.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>
            An DbConnection(OleDbConnection).
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorOleDb.GetDbConnectionStringBuilder">
            <summary>
            Gets an DbConnectionStringBuilder.
            </summary>
            <returns>
            An DbConnectionStringBuilder(OleDbConnectionStringBuilder)
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorOleDb.GetIDbConnection">
            <summary>
            Gets an IDbConnection (Interface Type).
            </summary>
            <returns>
            An IDbConnection(OleDbConnection).
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorOleDb.GetIDbConnection(System.String)">
            <summary>
            Gets an IDbConnection (Interface Type). With the connectionString.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>
            An IDbConnection(OleDbConnection).
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorOleDb.GetIDbDataParameter">
            <summary>
            Gets an IDbDataParameter.
            </summary>
            <returns>
            An IDbDataParameter(OleDbParameter).
            </returns>
        </member>
        <member name="T:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorSQLite">
            <summary>
            Implentation of AbstractDataObjectCreator Class for SQLite.
            </summary>
            <seealso cref="T:SysWork.Data.Common.DataObjectProvider.AbstractDataObjectCreator" />
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorSQLite.GetDbConnection">
            <summary>
            Gets an DbConnection.
            </summary>
            <returns>
            An DbConnection(SQLiteConnection).
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorSQLite.GetDbConnection(System.String)">
            <summary>
            Gets an DbConnection with the connectionString.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>
            An DbConnection(SQLiteConnection).
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorSQLite.GetDbConnectionStringBuilder">
            <summary>
            Gets an DbConnectionStringBuilder.
            </summary>
            <returns>
            An DbConnectionStringBuilder(SQLiteConnectionStringBuilder).
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorSQLite.GetIDbConnection">
            <summary>
            Gets an IDbConnection (Interface Type).
            </summary>
            <returns>
            An IDbConnection(SQLiteConnection).
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorSQLite.GetIDbConnection(System.String)">
            <summary>
            Gets an IDbConnection (Interface Type). With the connectionString.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>
            An IDbConnection(SQLiteConnection).
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorSQLite.GetIDbDataParameter">
            <summary>
            Gets an IDbDataParameter.
            </summary>
            <returns>
            An IDbDataParameter(SQLiteParameter).
            </returns>
        </member>
        <member name="T:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMSSqlServer">
            <summary>
            Implentation of AbstractDataObjectCreator Class for MSSqlServer.
            </summary>
            <seealso cref="T:SysWork.Data.Common.DataObjectProvider.AbstractDataObjectCreator" />
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMSSqlServer.GetDbConnection">
            <summary>
            Gets an DbConnection.
            </summary>
            <returns>DbConnection (SqlConnection).</returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMSSqlServer.GetDbConnection(System.String)">
            <summary>
            Gets an DbConnection with connectionString.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>An DbConnection (SqlConnection)</returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMSSqlServer.GetDbConnectionStringBuilder">
            <summary>
            Gets an DbConnectionStringBuilder.
            </summary>
            <returns>
            An DbConnectionStringBuilder (SqlConnectionStringBuilder)
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMSSqlServer.GetIDbConnection">
            <summary>
            Gets an IDbConnection (Interface Type).
            </summary>
            <returns>An IDbConnection (SqlConnection).</returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMSSqlServer.GetIDbConnection(System.String)">
            <summary>
            Gets an IDbConnection (Interface Type). With the connectionString.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>IDbConnection (SqlConnection) </returns>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.DataObjectCreatorMSSqlServer.GetIDbDataParameter">
            <summary>
            Gets an IDbDataParameter.
            </summary>
            <returns>An IDbDataParameter (SqlParameter)</returns>
        </member>
        <member name="T:SysWork.Data.Common.DataObjectProvider.StaticDbObjectProvider">
            <summary>
            Static class that provides Database Objects depending on the database engine provided.
            </summary>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.StaticDbObjectProvider.GetIDbConnection(SysWork.Data.Common.EDataBaseEngine,System.String)">
            <summary>
            Gets an IDbConnection depending of the database engine,with the connectionString provided.
            </summary>
            <param name="dataBaseEngine">The data base engine.</param>
            <param name="ConnectionString">The connection string.</param>
            <returns>
            An instantiated IDbConnection depending of the database engine, with the connectionString provided. The object is closed.
            </returns>
            <exception cref="T:System.ArgumentException">The databaseEngine value is not supported by this method.</exception>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.StaticDbObjectProvider.GetIDbConnection(SysWork.Data.Common.EDataBaseEngine)">
            <summary>
            Gets an IDbConnection depending of the database engine.
            </summary>
            <param name="dataBaseEngine">The data base engine.</param>
            <returns>
            An instantiated IDbConnection depending of the database engine. The object is closed.
            </returns>
            <exception cref="T:System.ArgumentException">The databaseEngine value is not supported by this method.</exception>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.StaticDbObjectProvider.GetDbConnection(SysWork.Data.Common.EDataBaseEngine,System.String)">
            <summary>
            Gets an DbConnection depending of the database engine,with the connectionString provided.
            </summary>
            <param name="dataBaseEngine">The data base engine.</param>
            <param name="ConnectionString">The connection string.</param>
            <returns>
            An instantiated DbConnection depending of the database engine, with the connectionString provided. The object is closed.
            </returns>
            <exception cref="T:System.ArgumentException">The databaseEngine value is not supported by this method.</exception>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.StaticDbObjectProvider.GetDbConnection(SysWork.Data.Common.EDataBaseEngine)">
            <summary>
            Gets an DbConnection depending of the database engine.
            </summary>
            <param name="dataBaseEngine">The data base engine.</param>
            <returns>
            An instantiated DbConnection depending of the database engine. The object is closed.
            </returns>
            <exception cref="T:System.ArgumentException">The databaseEngine value is not supported by this method.</exception>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.StaticDbObjectProvider.GetDataBaseEngineFromDbConnection(System.Data.Common.DbConnection)">
            <summary>
            Gets the EdatabaseEngine from DbConnection Object.
            </summary>
            <param name="dbConnection">The database connection.</param>
            <returns>
            An EDatabaseEngine value depending on a DbConnection object.
            </returns>
            <exception cref="T:System.ArgumentException">The dbConnection provided is not supported by this method.</exception>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.StaticDbObjectProvider.GetDataBaseEngineFromDbCommand(System.Data.Common.DbCommand)">
            <summary>
            Gets the EdatabaseEngine from DbCommand Object.
            </summary>
            <param name="dbCommand">The database command.</param>
            <returns>
            An EDatabaseEngine value depending on a DbCommand object.
            </returns>
            <exception cref="T:System.ArgumentException">The databaseEngine value is not supported by this method.</exception>
        </member>
        <member name="M:SysWork.Data.Common.DataObjectProvider.StaticDbObjectProvider.GetDbConnectionStringBuilder(SysWork.Data.Common.EDataBaseEngine)">
            <summary>
            Gets an DbConnectionStringBuilder depending of the database engine.
            </summary>
            <param name="dataBaseEngine">The data base engine.</param>
            <returns>
            An instantiated DbConnectionStrigBuilder depending of the database engine.
            </returns>
            <exception cref="T:System.ArgumentException">The databaseEngine value is not supported by this method.</exception>
        </member>
        <member name="T:SysWork.Data.Common.EDataBaseEngine">
            <summary>
            Supported Database Engines
            </summary>
        </member>
        <member name="F:SysWork.Data.Common.EDataBaseEngine.MSSqlServer">
            <summary>
            Microsoft SQL Server
            </summary>
        </member>
        <member name="F:SysWork.Data.Common.EDataBaseEngine.SqLite">
            <summary>
            SQLite V3
            </summary>
        </member>
        <member name="F:SysWork.Data.Common.EDataBaseEngine.OleDb">
            <summary>
            OleDb
            </summary>
        </member>
        <member name="F:SysWork.Data.Common.EDataBaseEngine.MySql">
            <summary>
            MySql
            </summary>
        </member>
        <member name="M:SysWork.Data.Common.SimpleQuery.SimpleQuery.Execute(System.Data.Common.DbConnection,System.String)">
            <summary>
            
            Dado un DbConnection instanciado y un commandText
            ejecuta una consulta de devuelve un IEnumerable dinamico.
            En caso que la conexion este cerrada, intenta abrirla.
            *NO Cierra* la conexion al finalizar el metodo
            
            </summary>
            <param name="dbConnection"></param>
            <param name="commandText"></param>
            <returns>IEnumerable dinamico</returns>
        </member>
        <member name="M:SysWork.Data.Common.SimpleQuery.SimpleQuery.Execute(System.String,System.String,System.Boolean)">
            <summary>
            Dado un connectionString y un commandText intentará crear una
            SqlConnection, ejecutara la consulta que devuelve un IEnumerable dinamico.
            </summary>
            <param name="connectionString"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.SimpleQuery.SimpleQuery.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Dado un IEnumerableDinamico y una posicion, devuelve el dinamico
            que corresponde con dicha posicion
            </summary>
            <typeparam name="dynamic"></typeparam>
            <param name="items"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:SysWork.Data.Common.Utilities.DbUtil">
            <summary>
            Database Utilities
            </summary>
            <remarks>
            All methods are "multi" Database Engine
            </remarks>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.ExistsTable(System.String,System.String)">
            <summary>Given a connectionString and the name of a table determines if the table exists. The default DatabaseEngine is MSSqlServer</summary>
            <param name="connectionString">The connection string.</param>
            <param name="tableName">Name of the table.</param>
            <returns>
                <c>true</c> if the table exists, or <c>false</c> if not.
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.ExistsTable(SysWork.Data.Common.EDataBaseEngine,System.String,System.String)">
            <summary>
            Given a connectionString, the name of a table and DatabaseEngine, determines if the table exists. 
            </summary>
            <param name="dataBaseEngine">The data base engine.</param>
            <param name="connectionString">The connection string.</param>
            <param name="tableName">Name of the table.</param>
            <returns>
                <c>true</c> if the table exists, or <c>false</c> if not.
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.GetListTables(System.String)">
            <summary>Given a connectionString return a list of tables in the Database. The default DatabaseEngine is MSSqlServer</summary>
            <param name="connectionString">The connection string.</param>
            <returns>List of tables in string format.</returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.GetListTables(SysWork.Data.Common.EDataBaseEngine,System.String)">
            <summary>Given a connectionString and DatabaseEngine, return a list of tables in the Database.</summary>
            <param name="dataBaseEngine">The data base engine.</param>
            <param name="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.ExistsColumn(System.String,System.String,System.String)">
            <summary>
            
            Determina si existe una columna, en una tabla de una base de datos.
            
            </summary>
            <param name="connectionString"></param>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.ExistsColumn(SysWork.Data.Common.EDataBaseEngine,System.String,System.String,System.String)">
            <summary>
            Existses the column.
            </summary>
            <param name="dataBaseEngine">The data base engine.</param>
            <param name="connectionString">The connection string.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.ExecuteBatchNonQuery(System.String,System.String)">
            <summary>
            Executes the batch non query.
            </summary>
            <param name="query">The query.</param>
            <param name="ConnectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.ExecuteBatchNonQuery(SysWork.Data.Common.EDataBaseEngine,System.String,System.String)">
            <summary>
            Executes the batch non query.
            </summary>
            <param name="dataBaseEngine">The data base engine.</param>
            <param name="query">The query.</param>
            <param name="ConnectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.ExecuteBatchNonQuery(SysWork.Data.Common.EDataBaseEngine,System.String,System.Data.IDbConnection)">
            <summary>
            Execute a list of sentences separated by the GO clause.
            </summary>
            <param name="dataBaseEngine">The data base engine.</param>
            <param name="query">The query.</param>
            <param name="connection">The connection.</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.ConnectionSuccess(System.String,System.String@)">
            <summary>
            Verifica si una Connection se puede abrir correctamente, por default 
            el motor de base de datos es MsSqlServer
            
            </summary>
            <param name="connectionString"></param>
            <param name="mensajeError"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.ConnectionSuccess(SysWork.Data.Common.EDataBaseEngine,System.String,System.String@)">
            <summary>
            Verifica si una Connection se puede abrir correctamente,  
            Debe especificarse el motor de base de datos.
            
            </summary>
            <param name="connectionString"></param>
            <param name="mensajeError"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.IsValidConnectionString(SysWork.Data.Common.EDataBaseEngine,System.String,System.String@)">
            <summary>
            Valida si una cadena de conexion es correcta para el motor de base de datos especificado
            </summary>
            <param name="dataBaseEngine"></param>
            <param name="connectionString"></param>
            <param name="mensajeError"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.ExistsConnectionStringInConfig(System.String)">
            <summary>
            
            Verifica si una cadena de conexion existe en el archivo de configuracion de la app
            
            </summary>
            <param name="connectionStringName"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.GetConnectionStringFromConfig(System.String)">
            <summary>
            
            Obtiene una cadena de conexion del archivo de configuracion de la app.
            
            </summary>
            <param name="connectionStringName"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.EditConnectionStringInConfig(System.String,System.String)">
            <summary>
            Edita los valores de una cadena de conexion existente en el archivo de configuracion de la app.
            </summary>
            <param name="connectionStringName"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.SaveConnectionStringInConfig(System.String,System.String)">
            <summary>
            Graba una nueva cadena de conexion en el archivo de configuracion de la app.
            </summary>
            <param name="connectionStringName"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.AddPrefixTableNameToFieldList(System.String,System.String)">
            <summary>
            Agrega un prefijo en los nombres de las columnas de una tabla.
            </summary>
            <param name="fieldList">lista de campos, separados por coma (,)</param>
            <param name="tableName">nombre de la tabla, NO incluir el punto</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.ConvertToDatatable``1(System.Collections.Generic.List{``0})">
            <summary>
            Convierte una lista generica tipo T, en un DataTable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.Decrypt(System.String)">
            <summary>
            Desencrypta un valor, este es utilizado por los metodos que solicitan parametros de la base de datos.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.Encrypt(System.String)">
            <summary>
            Encrypta un valor, este es utilizado por los metodos que solicitan parametros de la base de datos.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.DecryptedConnectionString(System.String)">
            <summary>
            Dada una ConnectionString de MSSqlServer encryptada, devuelve la misa desencryptada
            </summary>
            <param name="encryptedConnectionString"></param>
            <returns>
            An Decrypted ConnectionString
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.DecryptedConnectionString(SysWork.Data.Common.EDataBaseEngine,System.String)">
            <summary>
            Dada una ConnectionString encryptada, devuelve la misa desencryptada
            </summary>
            <param name="dataBaseEngine"></param>
            <param name="encryptedConnectionString"></param>
            <returns>
            An Decrypted ConnectionString
            </returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.DbUtil.ParseToLong(System.Object)">
            <summary>
            Try to Parse from multiple Types to Long.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.NulleableValue.NulleableDateTime(System.String)">
            <summary>
            Valida si la cadena recibida es un DateTime valido, y en caso que 
            si castea, sino devuelve NULL
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.NulleableValue.NulleableLong(System.Object)">
            <summary>
            Util para cuando se desea tomar el SelectedValue de un comboBox por ejemplo
            </summary>
            <param name="valor"></param>
            <returns></returns>
        </member>
        <member name="T:SysWork.Data.Common.Utilities.SafeReader">
            <summary>
            Author : Diego Martinez
            Email : dmartinez@syswork.com.ar
            Date : 10/08/2018
            Description : Clase manejo de Null de DataReaders y Entidades, basicamente
                          convierte DBNull en null, en los tipos admitidos.
            
            </summary>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.SafeReader.ReadInt32(System.Data.IDataReader,System.String)">
            <summary>
            Lee una columna que puede contener null, por el nombre y en caso de obtener
            DBNull, lo convierte a null.
            </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.SafeReader.ReadInt32(System.Data.IDataReader,System.Int32)">
            <summary>
            Lee una columna que puede contener null, por la posicion y en caso de obtener
            DBNull, lo convierte a null.
            </summary>
            <param name="reader"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.SafeReader.ReadBool(System.Data.IDataReader,System.String)">
            <summary>
            Lee una columna que puede contener null, por el nombre y en caso de obtener
            DBNull, lo convierte a **false**.
            </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.SafeReader.ReadBool(System.Data.IDataReader,System.Int32)">
            <summary>
            Lee una columna que puede contener null, por su posicion y en caso de obtener
            DBNull, lo convierte a **false**.
            </summary>
            <param name="reader"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.SafeReader.ReadString(System.Data.IDataReader,System.String)">
            <summary>
            Lee una columna que puede contener null, por el nombre y en caso de obtener
            DBNull, lo convierte a null.
            </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.SafeReader.ReadString(System.Data.IDataReader,System.Int32)">
            Lee una columna que puede contener null, por la posicion y en caso de obtener
            DBNull, lo convierte a null.
        </member>
        <member name="M:SysWork.Data.Common.Utilities.SafeReader.ReadDateTime(System.Data.IDataReader,System.String)">
            <summary>
            Lee una columna que puede contener null, por el nombre y en caso de obtener
            DBNull, lo convierte a null.
            </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.SafeReader.ReadDateTime(System.Data.IDataReader,System.Int32)">
            <summary>
            Lee una columna que puede contener null, por su posicion y en caso de obtener
            DBNull, lo convierte a null.
            </summary>
            <param name="reader"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.SafeReader.ReadLong(System.Data.IDataReader,System.String)">
            <summary>
            Lee una columna que puede contener null, por el nombre y en caso de obtener
            DBNull, lo convierte a null.
            </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.Common.Utilities.SafeReader.ReadLong(System.Data.IDataReader,System.Int32)">
            <summary>
            Lee una columna que puede contener null, por su posicion y en caso de obtener
            DBNull, lo convierte a null.
            </summary>
            <param name="reader"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:SysWork.Data.DaoModel.Attributes.DbColumnAttribute">
            <summary>
            Usar este atributo para decorar las propiedades en las clases modelos (Entities).
            Estas propiedades tienen que tener exactamente el mismo nombre que las columnas de la Tabla de Base de Datos.
            </summary>
        </member>
        <member name="P:SysWork.Data.DaoModel.Attributes.DbColumnAttribute.Convert">
            <summary>
            Setear en TRUE si se requiere de una conversion implicita.
            </summary>
        </member>
        <member name="P:SysWork.Data.DaoModel.Attributes.DbColumnAttribute.IsPrimary">
            <summary>
            Setear en TRUE si el atributo representa la primary key en la tabla. (pueden ser mas de una)
            y en las rutinas de actualizacion, se utiliza este campo y no otro para actualizar.
            </summary>
        </member>
        <member name="P:SysWork.Data.DaoModel.Attributes.DbColumnAttribute.IsIdentity">
            <summary>
            Especifica si el atributo representa a una columna de tipo identity. (Deberia haber una sola)
            </summary>
        </member>
        <member name="T:SysWork.Data.DaoModel.Attributes.DbTableAttribute">
            <summary>
            Configures the name of the db table related to this entity. If the attribute is not specified, the class name is used instead.
            </summary>
        </member>
        <member name="T:SysWork.Data.DaoModel.CodeWriter.DaoClassFromDb">
            <summary>
            Fecha: 30/07/2017
            Author: Diego Martinez
            
            Se encarga de generar una clase tipo DAO, ademas genera tantos metodos 
            como UNIQUE KEY tenga la Tabla.
            
            </summary>
        </member>
        <member name="M:SysWork.Data.DaoModel.CodeWriter.DaoClassFromDb.AddMethodsGetByUniquesKeys">
            <summary>
             Verifica todas las claves UNIQUE que contenga la tabla y en base a eso genera un
             metodo que devuelve una entidad
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.CodeWriter.DaoClassFromDb.GetMethodNameGetByUnique(System.Data.DataTable,System.String)">
            <summary>
            En base a las columnas que tenga la restriccion, genera el nombre del metodo
            con prefijo GetBy + El nombre de las columnas en estilo CamelCase
            </summary>
            <param name="schema"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.CodeWriter.DaoClassFromDb.GetMethodParametersGetByUnique(System.Data.DataTable,System.String)">
            <summary>
            Crea la lista de parametros que tiene que recibir el metodo GetBy
            con el tipo de Datos Correspondiente
            </summary>
            <param name="schema"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="T:SysWork.Data.DaoModel.CodeWriter.EntityClassFromDb">
            <summary>
            
            Fecha: 29/07/2018
            Author: Diego Martinez
            
            Dada una Cadena de conexion y una Tabla, crea una entidad para representarla
            
            </summary>
        </member>
        <member name="T:SysWork.Data.DaoModel.BaseDao`1">
            <summary>
            /
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <seealso cref="T:SysWork.Data.DaoModel.Interfaces.IBaseDao`1" />
        </member>
        <member name="P:SysWork.Data.DaoModel.BaseDao`1.ConnectionString">
            <summary>
            
            Active ConnectionString.
            
            </summary>
        </member>
        <member name="P:SysWork.Data.DaoModel.BaseDao`1.DataBaseEngine">
            <summary>
            
            Database Engine.
            
            </summary>
            <seealso cref="T:SysWork.Data.Common.EDataBaseEngine"/>
        </member>
        <member name="P:SysWork.Data.DaoModel.BaseDao`1._dataObjectProvider">
            <summary>Gets the data object provider.</summary>
            <value>The data object provider.</value>
        </member>
        <member name="F:SysWork.Data.DaoModel.BaseDao`1._syntaxProvider">
            <summary>The syntax provider</summary>
        </member>
        <member name="P:SysWork.Data.DaoModel.BaseDao`1.TableName">
            <summary>
            
            Nombre de la tabla que representa la entidad.
            
            </summary>
        </member>
        <member name="P:SysWork.Data.DaoModel.BaseDao`1.ListObjectPropertyInfo">
            <summary>
            
            Contiene la lista de propiedades de la entidad vinculadas a la DB.
            
            </summary>
        </member>
        <member name="P:SysWork.Data.DaoModel.BaseDao`1.ColumnsForInsert">
            <summary>
            
            Devuelve una lista separada por comas de columnas para realizar un INSERT (No incluye las columnas tipo Identity.)
            
            </summary>
        </member>
        <member name="P:SysWork.Data.DaoModel.BaseDao`1.ColumnsForSelect">
            <summary>
            
            Devuelve una lista separada por comas de columnas que deberian utilizarse para realizar un SELECT.
            
            </summary>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.#ctor(System.String)">
            <summary>
            
            Crea una nueva instancia de BaseDao, el motor a utilizar es MSSqlServer.
            
            </summary>
            <param name="ConnectionString">Cadena de conexion valida</param>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.#ctor(System.String,SysWork.Data.Common.EDataBaseEngine)">
            <summary>
            
            Crea una nueva instancia de BaseDao, utilizando el motor de base de datos informado. 
            
            </summary>
            <param name="ConnectionString">Cadena de conexion valida</param>
            <param name="dataBaseEngine">El motor de base de datos a utilizar</param>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.Add(`0,System.String@)">
             <summary>
             
             Inserta una entidad en la base de datos.
             
             No lanza excepciones.
            
             En caso de insersion exitosa devuelve la identidad insertada. 
             En caso de no tener un campo tipo identity, devuelve 0.
             En caso de error devuelve -1 y el mensaje de la expcecion en el parametro de salida errMessage.
             
             </summary>
             <param name="entity">Entidad a Insertar</param>
             <param name="errMessage">OUT En caso de ocurrir una excepcion, encapsula el mensaje de error de la excepcion original</param>
             <returns>
             
             En caso de insersion exitosa devuelve la identidad insertada. 
             En caso de no tener un campo tipo identity, devuelve 0.
             En caso de error devuelve -1 y el mensaje de la expcecion en el parametro de salida errMessage.
             
             </returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.Add(`0,System.Data.IDbConnection)">
            <summary>
            
            Agrega una entidad.
            
            </summary>
            <param name="entity"></param>
            <param name="paramDbConnection">Esta conexion no se cerrará en el método</param>
            <exception cref="T:SysWork.Data.DaoModel.Exceptions.DaoModelException">Encapsula la excepcion original</exception>
            <returns>
            
            En caso de exito devuelve la identidad insertada. 
            En caso de no tener un campo tipo identity, devuelve 0
            En caso de error lanza una excepcion del tipo DaoModel.
            
            </returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.Add(`0,System.Data.IDbTransaction)">
            <summary>
            
            Agrega una entidad.
            
            
            </summary>
            <param name="entity"></param>
            <param name="paramDbTransaction">Se toma como transaccion activa y se toma la conexion de la transaccion</param>
            <exception cref="T:SysWork.Data.DaoModel.Exceptions.DaoModelException">Encapsula la excepcion original</exception>
            <returns>
            
            En caso de exito devuelve la identidad insertada. 
            En caso de no tener un campo tipo identity, devuelve 0
            En caso de error lanza una excepcion del tipo DaoModel.
            
            </returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.Add(`0,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            
            Agrega una entidad.
            
            </summary>
            <param name="entity"></param>
            <param name="paramDbConnection">Esta conexion no se cerrará en el método</param>
            <param name="paramDbTransaction">Se toma como transaccion activa </param>
            <exception cref="T:SysWork.Data.DaoModel.Exceptions.DaoModelException">Encapsula la excepcion original</exception>
            <returns>
            
            En caso de exito devuelve la identidad insertada.
            En caso de no tener un campo tipo identity, devuelve 0
            En caso de error lanza una excepcion del tipo DaoModel.
            
            </returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.AddRange(System.Collections.Generic.IList{`0},System.String@)">
            <summary>
            
            Recibe una lista de entidades y las inserta.
            
            </summary>
            <param name="entities"></param>
            <param name="errMessage">Parametro de salida, en caso de error muestra el mensaje de la excepcion</param>
            <returns>Devuelve true, si no ocurrieron errores.</returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.AddRange(System.Collections.Generic.IList{`0})">
            <summary>
            
            Recibe una lista de entidades y las inserta.
            En caso de error lanza una excepcion del tipo DaoModel.
            
            </summary>
            <param name="entities"></param>
            <exception cref="T:SysWork.Data.DaoModel.Exceptions.DaoModelException">Encapsula la excepcion original</exception>
            <returns>Devuelve true, si no ocurrieron errores</returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.AddRange(System.Collections.Generic.IList{`0},System.Data.IDbConnection)">
            <summary>
            
            Recibe una lista de entidades y las inserta.
            En caso de error lanza una excepcion del tipo DaoModel.
            
            </summary>
            <param name="entities"></param>
            <param name="paramDbConnection">Esta conexion no se cerrará en el método</param>
            <exception cref="T:SysWork.Data.DaoModel.Exceptions.DaoModelException">Encapsula la excepcion original</exception>
            <returns>Devuelve true, si no ocurrieron errores</returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.AddRange(System.Collections.Generic.IList{`0},System.Data.IDbTransaction)">
            <summary>
            Recibe una lista de entidades y las inserta
            
            Devuelve true, si no ocurrieron errores
            En caso de error lanza una excepcion del tipo DaoModel.
            
            </summary>
            <param name="entities"></param>
            <param name="paramDbTransaction">Se toma como transaccion activa y se toma la conexion de la transaccion</param>
            <exception cref="T:SysWork.Data.DaoModel.Exceptions.DaoModelException">Encapsula la excepcion original</exception>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.AddRange(System.Collections.Generic.IList{`0},System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Recibe una lista de entidades y las inserta
            
            Devuelve true, si no ocurrieron errores
            En caso de error lanza una excepcion del tipo DaoModel.
            
            </summary>
            <param name="entities"></param>
            <param name="paramDbConnection">Esta conexion no se cerrará en el método</param>
            <param name="paramDbTransaction">Se toma como transaccion activa </param>
            <exception cref="T:SysWork.Data.DaoModel.Exceptions.DaoModelException">Encapsula la excepcion original</exception>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.AddRange(System.Collections.Generic.IList{`0},System.Data.IDbConnection,System.Data.IDbTransaction,System.Int64@)">
            <summary>
            Recibe una lista de entidades y las inserta
            
            Devuelve true, si no ocurrieron errores
            En caso de error lanza una excepcion del tipo DaoModel.
            
            </summary>
            <param name="entities"></param>
            <param name="paramDbConnection">Esta conexion no se cerrará en el método</param>
            <param name="paramDbTransaction">Se toma como transaccion activa </param>
            <param name="recordsAffected">Devuelve la cantidad de registros que se actualizaron</param>
            <exception cref="T:SysWork.Data.DaoModel.Exceptions.DaoModelException">Encapsula la excepcion original</exception>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.Update(`0,System.String@)">
            <summary>
            
            Actualiza una entidad.
            
            En caso de exito devuelve true, caso contrario false.
            En caso de error lanza una excepcion del tipo DaoModel.
            </summary>
            <param name="entity"></param>
            <param name="errMessage">Parametro de salida, en caso de error, guarda el mensaje de la excepcion original</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.Update(`0)">
            <summary>
            
            Actualiza una entidad.
            
            En caso de exito devuelve true, caso contrario false.
            En caso de error lanza una excepcion del tipo DaoModel.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.Update(`0,System.Data.IDbConnection)">
            <summary>
            
            Actualiza una entidad.
            
            En caso de exito devuelve true, caso contrario false.
            En caso de error lanza una excepcion del tipo DaoModel.
            </summary>
            <param name="entity"></param>
            <param name="paramDbConnection">Recibe una conexion, al finalizar no la cerrará</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.Update(`0,System.Data.IDbTransaction)">
            <summary>
            
            Actualiza una entidad.
            
            En caso de exito devuelve true, caso contrario false.
            En caso de error lanza una excepcion del tipo DaoModel.
            </summary>
            <param name="entity"></param>
            <param name="paramDbTransaction">Recibe una transaccion, se utilizará la conection de la transaction</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.Update(`0,System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            
            Actualiza una entidad.
            
            En caso de exito devuelve true, caso contrario false.
            En caso de error lanza una excepcion del tipo DaoModel.
            </summary>
            <param name="entity"></param>
            <param name="paramDbConnection">Recibe una Conection, no se cerrará al finalizar</param>
            <param name="paramDbTransaction">Recibe una transaction, se utilizará para la ejecucion de los comandos</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.Update(`0,System.Data.IDbConnection,System.Data.IDbTransaction,System.Int64@)">
            <summary>
            
            Actualiza una entidad.
            
            En caso de exito devuelve true, caso contrario false.
            En caso de error lanza una excepcion del tipo DaoModel.
            </summary>
            <param name="entity"></param>
            <param name="paramDbConnection">Recibe una Conection, no se cerrará al finalizar</param>
            <param name="paramDbTransaction">Recibe una transaction, se utilizará para la ejecucion de los comandos</param>
            <param name="recordsAffected">Parametro de salida, devuelve la cantidad de registros afectados</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.UpdateRange(System.Collections.Generic.IList{`0},System.String@)">
            <summary>
            
            Actualiza una lista de entidades.
            
            En caso de exito devuelve true, caso contrario false.
            En caso de error lanza una excepcion del tipo DaoModel.
            </summary>
            <param name="entities"></param>
            <param name="errMessage">Parametro de salida, en caso de error, devuelve el mensaje de la excepcion</param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.UpdateRange(System.Collections.Generic.IList{`0})">
            <summary>
            
            Actualiza una lista de entidades.
            
            En caso de exito devuelve true, caso contrario false.
            En caso de error lanza una excepcion del tipo DaoModel.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.UpdateRange(System.Collections.Generic.IList{`0},System.Data.IDbConnection)">
            <summary>
            
            Actualiza una lista de entidades.
            
            En caso de error lanza una excepcion del tipo DaoModel.
            </summary>
            <param name="entities">Lista de Entidades</param>
            <param name="paramDbConnection">Recibe una connection, al finalizar dicha connection no se cerrará</param>
            <returns>En caso de exito devuelve true, caso contrario false</returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.GetAll">
            <summary>
            Obtiene todas las entidades
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.GetAll(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Obtiene todas las entidades, recibiendo una conexion externa la cual no se 
            cerrará al finalizar el metodo.
            </summary>
            <param name="paramDbConnection"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.GetListByLambdaExpressionFilter(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Obtiene una lista filtrada por una expresion LAMBDA
            </summary>
            <param name="lambdaExpressionFilter"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.GetIDbConnection">
            <summary>
            Devuelve un *IDbConnection*, dependiendo del motor de base de datos del DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.GetDbConnection">
            <summary>
            Devuelve un *DbConnection*, dependiendo del motor de base de datos del DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.GetIDbDataParameter">
            <summary>
            Devuelve un IDbParameter, dependiendo del motor de base de datos del DAO
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.GetDbColumnsAndAtributes">
            <summary>
            Obtiene la lista de Columnas para INSERT (No incluye las columnas con atributo IsIdentity) 
            Obtiene la lista de Columnas para SELECT.
            Obtiene atributos de las columnas en la base de datos (Tipo y Longitud) 
            </summary>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.CreateIDbDataParameter(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Permite crear un IDbParamenter
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.BaseDao`1.CreateIDbDataParameter(System.String,System.Data.DbType,System.Object,System.Nullable{System.Int32})">
            <summary>
            Permite crear un IDbParamenter
            </summary>
            <param name="parameterName"></param>
            <param name="DbType"></param>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.IDataReaderToEntity.Map``1(System.Data.IDataReader)">
            <summary>
            Mapea una entidad desde un IDataReader
            </summary>
            <param name="reader">IDataReader a mapear</param>
            <typeparam name="T">Entidad a mapear,solo los atributos que posean el decorador DbColumn seran tenidos en cuenta</typeparam>
        </member>
        <member name="M:SysWork.Data.DaoModel.IDataReaderToEntity.Map``1(System.Data.IDataReader,System.Collections.Generic.IList{System.Reflection.PropertyInfo})">
            <summary>
            **OPTIMIZADO** Mapea una entidad desde un IDataReader, Ideal para Bucles o multiples iteraciones, donde ya tenemos info del Objeto etc.
            </summary>
            <param name="reader">IDataReader a mapear</param>
            <param name="listObjectPropertyInfo">En el caso que se posea la lista de atributos de la clase que esten vinculados a la DB, se pasan como parametro, evitando volver a buscarlos</param>
            <typeparam name="T">Entidad a mapear,solo los atributos que posean el decorador DbColumn seran tenidos en cuenta</typeparam>
        </member>
        <member name="M:SysWork.Data.DaoModel.IDataReaderToEntity.MapSingle``1(System.Data.IDataReader)">
            <summary>
             Dado un IDataReader y el Tipo de Entidad devuelve una entidad mapeada.
             NO es responsabilidad de esta clase validar el avance del datareader por medio del metodo .Read()
             Debera validarse antes de llamarla.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="reader"></param>
            <param name="listObjectPropertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.IDataReaderToEntity.MapSingle``1(System.Data.IDataRecord)">
            <summary>Maps the single.</summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="dataRecord">The data record.</param>
            <returns></returns>
        </member>
        <member name="T:SysWork.Data.DaoModel.DataManagerBase">
             <summary>
             Abstract class to implement a DAOS manager 
            </summary>
            <example>
            <code>
            public class DataManager : DataManagerBase
            {
                public DaoPerson DaoPerson { get; private set; }
                private static DataManager _dataManagerInstance = null;
                
                // Set's de DataBaseEngine
                private EDataBaseEngine _eDataBaseEngine = EDataBaseEngine.MSSqlServer;
            
                private DataManager()
                {
                    InitDAOS();
                }
            
                public static DataManager GetInstance()
                {
                    ValidateInstanceCreation();
            
                    if (_dataManagerInstance == null)
                        _dataManagerInstance = new DataManager();
            
                    return _dataManagerInstance;
                }
            
                public override void InitDAOS()
                {
                    DaoPerson = new DaoPerson(ConnectionString, _eDataBaseEngine);
                }
            }
             
             </code>
             
             </example>
        </member>
        <member name="P:SysWork.Data.DaoModel.DataManagerBase.ConnectionString">
            <summary>Gets or Sets the ConnectionString.</summary>
            <value>The ConnectionString.</value>
        </member>
        <member name="P:SysWork.Data.DaoModel.DataManagerBase.DataBaseEngine">
            <summary>Gets or sets the data base engine.</summary>
            <value>The EDatabaseEngine.</value>
        </member>
        <member name="M:SysWork.Data.DaoModel.DataManagerBase.ValidateInstanceCreation">
            <summary>Validates the instance creation.</summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SysWork.Data.DaoModel.DataManagerBase.InitDAOS">
            <summary>Initializes the DAOS.</summary>
        </member>
        <member name="M:SysWork.Data.DaoModel.DataManagerBase.GetDbExecute">
            <summary>
            Devuelve una nueva instancia de un DbExecute con el motor de base de datos del proyecto y el connection string cargado.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SysWork.Data.DaoModel.DataManagerBase.GetDbConnection">
            <summary>Gets an DbConnection, corresponding to the database engine</summary>
            <returns></returns>
        </member>
        <member name="T:SysWork.Data.DaoModel.Exceptions.DaoModelException">
            <summary>
            
            Wrapper de excepciones, permite capturar la excepcion original, en caso que haya un DbCommand,
            el contenido del mismo y el StackTrace original.
            
            </summary>
        </member>
        <member name="T:SysWork.Data.DaoModel.Interfaces.IBaseDao`1">
            <summary>
            Interfaz generica de los Daos
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SysWork.Data.Logger.LoggerDb">
            <summary>
            
            </summary>
        </member>
        <member name="T:SysWork.Data.Logger.LoggerDb.ELoggerDbTagError">
            <summary></summary>
        </member>
        <member name="F:SysWork.Data.Logger.LoggerDb.ELoggerDbTagError.ErrorIntentandoAbrirConexion">
            <summary>The error intentando abrir conexion</summary>
        </member>
        <member name="T:SysWork.Data.Properties.Resources">
            <summary>
              Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
            </summary>
        </member>
        <member name="P:SysWork.Data.Properties.Resources.ResourceManager">
            <summary>
              Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
            </summary>
        </member>
        <member name="P:SysWork.Data.Properties.Resources.Culture">
            <summary>
              Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
              búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
            </summary>
        </member>
        <member name="P:SysWork.Data.Properties.Resources._675171_data_database_paradox_sqlite_db_512">
            <summary>
              Busca un recurso adaptado de tipo System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SysWork.Data.Properties.Resources.connector_icon_mssqlserver">
            <summary>
              Busca un recurso adaptado de tipo System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SysWork.Data.Properties.Resources.connector_icon_mysql">
            <summary>
              Busca un recurso adaptado de tipo System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SysWork.Data.Properties.Resources.connector_icon_oledb">
            <summary>
              Busca un recurso adaptado de tipo System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:SysWork.Data.Properties.Resources.connector_icon_sqlite">
            <summary>
              Busca un recurso adaptado de tipo System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:SysWork.Data.Syntax.SyntaxProvider">
            <summary>
            
            Author: Diego Martinez
            Mail: dmartinez@syswork.com.ar
            
            Description: Resuelve las distintas sintaxys de las consultas SQL.
            
            </summary>
        </member>
        <member name="M:SysWork.Data.Syntax.SyntaxProvider.GetSubQueryGetIdentity">
            <summary>
            
            Dependiendo del motor de base de datos utilizado, devuelve la subconsulta que debe
            realizarse para obtener la identidad insertada
            
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
